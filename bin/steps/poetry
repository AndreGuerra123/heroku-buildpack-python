#!/usr/bin/env bash

# shellcheck source=bin/utils
source "$BIN_DIR/utils"
set -e

if [[ -f pyproject.toml || -f poetry.lock ]]; then
    mcount "tool.poetry"

    # Set Pip env varsz
    # This reads certain environment variables set on the Heroku app config
    # and makes them accessible to the pip install process.
    # PIP_EXTRA_INDEX_URL allows for an alternate pypi URL to be used.
    if [[ -r "$ENV_DIR/PIP_EXTRA_INDEX_URL" ]]; then
        PIP_EXTRA_INDEX_URL="$(cat "$ENV_DIR/PIP_EXTRA_INDEX_URL")"
        export PIP_EXTRA_INDEX_URL
        mcount "buildvar.PIP_EXTRA_INDEX_URL"
    fi

    # Set SLUGIFY_USES_TEXT_UNIDECODE, required for Airflow versions >=1.10
    if [[ -r "$ENV_DIR/SLUGIFY_USES_TEXT_UNIDECODE" ]]; then
        SLUGIFY_USES_TEXT_UNIDECODE="$(cat "$ENV_DIR/SLUGIFY_USES_TEXT_UNIDECODE")"
        export SLUGIFY_USES_TEXT_UNIDECODE
        mcount "buildvar.SLUGIFY_USES_TEXT_UNIDECODE"
    fi

    # # Get Poetry Version from file
    # if [[ -r "$ENV_DIR/POETRY_VERSION" ]]; then
    #     POETRY_VERSION="$(cat "$ENV_DIR/POETRY_VERSION")"
    #     export POETRY_VERSION
    #     mcount "buildvar.POETRY_VERSION"
    # else
    #     export POETRY_VERSION="0.12.11"
    # fi

    # Install poetry.
    /app/.heroku/python/bin/pip install pipenv 2>&1 | cleanup | indent

    # Install the dependencies.
    if [ "$INSTALL_TEST" ]; then
        puts-step "Installing default and development dependencies with Poetry $POETRY_VERSION…"
        /app/.heroku/python/bin/poetry install 2>&1 | cleanup | indent
    else
        puts-step "Installing default dependencies with Pipenv $POETRY_VERSION…"
        /app/.heroku/python/bin/poetry install --no-dev 2>&1 | cleanup | indent
    fi

    /app/.heroku/python/bin/poetry run pip freeze > requirements.txt
    
    # Skip pip install later on.
    export SKIP_PIP_INSTALL=1

fi
set +e

