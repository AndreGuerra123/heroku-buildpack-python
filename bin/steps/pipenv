#!/usr/bin/env bash

# export CLINT_FORCE_COLOR=1
# export PIPENV_FORCE_COLOR=1
# shellcheck source=bin/utils
source "$BIN_DIR/utils"
set -e

if [[ -f Pipfile || -f Pipfile.lock ]]; then
    mcount "tool.pipenv"

    # Set Pip env vars
    # This reads certain environment variables set on the Heroku app config
    # and makes them accessible to the pip install process.
    # PIP_EXTRA_INDEX_URL allows for an alternate pypi URL to be used.
    if [[ -r "$ENV_DIR/PIP_EXTRA_INDEX_URL" ]]; then
        PIP_EXTRA_INDEX_URL="$(cat "$ENV_DIR/PIP_EXTRA_INDEX_URL")"
        export PIP_EXTRA_INDEX_URL
        mcount "buildvar.PIP_EXTRA_INDEX_URL"
    fi

    # Set SLUGIFY_USES_TEXT_UNIDECODE, required for Airflow versions >=1.10
    if [[ -r "$ENV_DIR/SLUGIFY_USES_TEXT_UNIDECODE" ]]; then
        SLUGIFY_USES_TEXT_UNIDECODE="$(cat "$ENV_DIR/SLUGIFY_USES_TEXT_UNIDECODE")"
        export SLUGIFY_USES_TEXT_UNIDECODE
        mcount "buildvar.SLUGIFY_USES_TEXT_UNIDECODE"
    fi

    # Set PIPEN_VERSION implicitly
    if [[ -r "$ENV_DIR/PIPENV_VERSION" ]]; then
        PIPENV_VERSION="$(cat "$ENV_DIR/PIPENV_VERSION")"
        export PIPENV_VERSION
        mcount "buildvar.PIPENV_VERSION"
    else
        export PIPENV_VERSION="2018.5.18"
    fi

    # Install pipenv.
    # Due to weird old pip behavior and pipenv behavior, pipenv upgrades pip
    # to latest if only --upgrade is specified. Specify upgrade strategy to
    # avoid this eager behavior.
    /app/.heroku/python/bin/pip install pipenv==$PIPENV_VERSION --upgrade --upgrade-strategy only-if-needed &> /dev/null

    # Install the dependencies.
    if [[ -f Pipfile.lock ]]; then
        
        if [ "$INSTALL_TEST" ]; then
            puts-step "Installing default and development dependencies with Pipenv $PIPENV_VERSION…"
            /app/.heroku/python/bin/pipenv install --system --ignore-pipfile --dev 2>&1 | cleanup | indent
        else
            puts-step "Installing default dependencies with Pipenv $PIPENV_VERSION…"
            /app/.heroku/python/bin/pipenv install --system --ignore-pipfile 2>&1 | cleanup | indent
        fi
    
    else

        if [ "$INSTALL_TEST" ]; then
            puts-step "Installing default and development dependencies with Pipenv $PIPENV_VERSION…"
            /app/.heroku/python/bin/pipenv install --system --skip-lock --dev 2>&1 | cleanup | indent
        else
            puts-step "Installing default dependencies with Pipenv $PIPENV_VERSION…"
            /app/.heroku/python/bin/pipenv install --system --skip-lock 2>&1 | cleanup | indent
        fi

    
    fi

    # Skip pip install later on.
    export SKIP_PIP_INSTALL=1

fi
set +e

